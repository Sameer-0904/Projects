# -*- coding: utf-8 -*-
"""Project-Image Classification with Fashion MNIST.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gUFprbsvW1ZlOamFnLaf3AAGzuP55Tf8

**Built a Image Classifier using Fashion MNIST dataset**
"""

# Random seed for reproducibility
import random
random.seed(0)

import numpy as np
np.random.seed(0)

import tensorflow as tf
tf.random.set_seed(0)

# Importing the libraries
from tensorflow.keras import layers, models, datasets
import matplotlib.pyplot as plt

# Data Curation: Load and prepare the dataset
fashion_mnist = datasets.fashion_mnist
(img_train, lbl_train), (img_test, lbl_test) = fashion_mnist.load_data()

"""Data Processing"""

type(img_train)

print(img_train.shape, lbl_train.shape, img_test.shape, lbl_test.shape)

print(img_train[0])

# Display an image from dataset
plt.imshow(img_train[0], cmap='gray')
plt.show()

print(lbl_train[0])

# Normalize pixel values in between 0 & 1
train_img, test_img = img_train / 255.0, img_test / 255.0

# Reshape images to specify it's a single channel
train_img = train_img.reshape((train_img.shape[0], 28, 28, 1))
test_img = test_img.reshape((test_img.shape[0], 28, 28, 1))

# train_img.shape

"""Convolutional Neural Network"""

model = models.Sequential()
model.add(layers.Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Conv2D(64, (3,3), activation='relu'))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Conv2D(364, (3,3), activation='relu'))

# Add Dense Layer
model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(10))

# Compile the model
model.compile(
    optimizer='adam',
    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
    metrics=['accuracy']
)

# Model Training
history = model.fit(
    train_img, lbl_train,
    epochs=5,
    validation_data=[test_img, lbl_test]
)

# Model Evaluation
loss, accuracy = model.evaluate(test_img, lbl_test, verbose=2)
print("Test Accuracy: ",accuracy)

# Plot Training accuracy & validation accuracy
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Training Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.title('Model Accuracy')
plt.legend()
plt.show()

# Plot Training loss & validation loss
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Training Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.title('Model Loss')
plt.legend()
plt.show()

model.save('trained_fashion_mnist_model.h5')

